#!/bin/sh
# 
# For auto scp file to server
# param: -f used to copy the hole scp.from.root directory.
# param: -i used to ignore files when use -f.
# param: -e used to allow files with specifid extensions.
# param: -c used to create a '.scp_config' sample file under current path.
# 
# Author: wsvn53@gmail.com
#
# TODO: 
# 1. support svn or git ignore .scp_config when it be generated.

# env variable
PATH_CUR=`pwd`
PATH_USR=`dirname ~`/`basename ~`
SCP_CONFIG=""
PATH_FILE="$PATH_CUR/$1"
FULL_COPY=0
DEBUG_MODE=0

function create_scp_config()
{
    if [ ! -f ".scp_config" ];then
        echo "scp.host=sample.scp2server.com\nscp.user=root\nscp.password=samplepassword\nscp.from=./\nscp.to=/root/sample/\debug.mode=0" >> .scp_config
        echo "File '.scp_config' created."
        exit 0
    else
        echo "File '.scp_config' exsit."
    fi
}

function scp2serv()
{
    PATH_FILE=$1
    REL_PATH=${PATH_FILE##*$SCP_FROM_ROOT}
    REMOTE_DIRNAME=`dirname "$SCP_TO_ROOT$REL_PATH"`
    INTERACT=("
    set timeout 30\n
    expect {\n
        \"*assword*\" {\n 
            send \"$SCP_PASS\\\\n\"\n
            exp_continue \n
        }\n 
        \"dev/null\" {\n
            exit \n
        }
        \"fingerprint\" {\n
            send \"yes\\\\n\" \n
            send_user \"\\\\nadd fingerprint to known_hosts\" \n
            exp_continue \n
        } \n
        timeout {\n
            send_user \"Timeout. abort.\\\\n\" \n
            exit \n
        } \n
    }")
    if [[ $DEBUG_MODE -eq 1 ]];then
        HIDE_STR="SCP2SERVER_IS_RUNNING_IN_DEBUG_MODE"
        echo $HIDE_STR
    else
        HIDE_STR="ssh\|$SCP_USER\|$SCP_HOST\|yes/no\|fingerprint"
    fi
    # mkdir on remote server
    if [[ $DEBUG_MODE -eq 1 ]];then echo "1) run 'mkdir -p' to create full path if not exsit";fi
    echo "set timeout 60\n spawn ssh $SCP_USER@$SCP_HOST \"mkdir -p \\\"${REMOTE_DIRNAME}\\\" 2 >> /dev/null\"\n $INTERACT" | expect | grep -v "$HIDE_STR"
    # scp to server
    if [[ $DEBUG_MODE -eq 1 ]];then echo "2) run scp to copy file to server";fi
    echo "spawn scp \"${PATH_FILE}\" $SCP_USER@$SCP_HOST:\"${SCP_TO_ROOT/ /\\\\ }${REL_PATH/ /\\\\ }\"\n $INTERACT" | expect | grep -v "$HIDE_STR"
}

# no parameter, just create a .scp_config file
if [ $# = 0 ];then
    create_scp_config
    echo "Nothing to do."
    exit 0
fi

# read options
while getopts "fi:e:hc" OPTNAME
do
    echo $OPTNAME
    case $OPTNAME in
        f) FULL_COPY=1;;
        i) IGNORE_MATCH=$OPTARG;;
        e) EXT_MATCH=$OPTARG;;
        c) create_scp_config;exit 0;;
    esac
done

# --ignore parameter
if [[ "$IGNORE_MATCH" = "" ]];then
    IGNORE_MATCH="/\.git\|/\.svn"
fi
IGNORE_MATCH=$IGNORE_MATCH"\|/\.scp_config"

# detect .scp_config file
while [[ "$PATH_CUR" != "$PATH_USR" ]]
do
    if [ -f "$PATH_CUR/.scp_config" ]; then
        SCP_CONFIG="$PATH_CUR/.scp_config"
        break
    else
        PATH_CUR=`cd "$PATH_CUR";cd ..;echo $PWD`
    fi
done

if [[ "$SCP_CONFIG" != "" ]]; then
    echo "Found .scp_config at: $SCP_CONFIG"
    CONFIG_VARS=`sed "s/\./_/" $SCP_CONFIG | sed "s/\.root=/=/"`
    export $CONFIG_VARS
    SCP_HOST=$scp_host
    SCP_USER=$scp_user
    SCP_PASS=$scp_password
    SCP_FROM_ROOT=$scp_from
    SCP_FROM_ROOT=$(cd "`dirname $SCP_CONFIG`";cd "$SCP_FROM_ROOT";echo $PWD)
    SCP_TO_ROOT=$scp_to
    DEBUG_MODE=$debug_mode
    PATH_CUR=$PWD
    # if --full 
    if [[ $FULL_COPY -eq 1 ]];then
        for FILE in `find $SCP_FROM_ROOT | grep -v "$IGNORE_MATCH" | grep "$EXT_MATCH"`
        do
            if [ -f $FILE ];then
                scp2serv "$FILE"
            fi
        done
    else
        scp2serv "$PATH_FILE"
    fi
    echo ">>---------------------------------Done------------------------------------<<"
    exit 0
fi
